name: Quality Gates

on:
  pull_request:
  workflow_dispatch:

jobs:
  validate-plan:
    name: Validate modernization plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate diagnostics against plan
        run: |
          python scripts/validate_plan.py

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: validate-plan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install SBOM tooling
        run: pip install cyclonedx-bom

      - name: Generate CycloneDX SBOM
        run: |
          set -euo pipefail
          help_text="$(cyclonedx-py requirements --help)"
          export CYC_HELP="$help_text"
          mapfile -t flags < <(python - <<'PY'
import os
import re
import sys

text = os.environ["CYC_HELP"]


def pick(options):
    pattern_template = r"(^|\s){option}([,\s]|$)"
    for option in options:
        pattern = pattern_template.format(option=re.escape(option))
        if re.search(pattern, text):
            return option
    print(f"Unable to detect any of {options}", file=sys.stderr)
    sys.exit(1)


print(pick(["--input-file", "--requirements-file", "--requirements", "-i", "-r"]))
print(pick(["--output-file", "--output", "-o"]))
print(pick(["--output-format", "--format", "-f", "-F"]))
PY
          ) || {
            echo "::error::Failed to detect cyclonedx-py CLI flags" >&2
            printf '%s\n' "$help_text" >&2
            exit 1
          }
          req_flag="${flags[0]}"
          out_flag="${flags[1]}"
          fmt_flag="${flags[2]}"
          unset CYC_HELP

          cyclonedx-py requirements \
            "$req_flag" requirements.txt \
            "$out_flag" sbom.json \
            "$fmt_flag" json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          if-no-files-found: error

  adr-consistency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Validate ADR consistency
        run: |
          python modernization/scripts/validate_adr_consistency.py

  apply-dry-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dry-run apply of batches
        run: |
          chmod +x modernization/changes/001-runtime-deps/apply.sh
          DRY_RUN=1 modernization/changes/001-runtime-deps/apply.sh
          chmod +x modernization/changes/002-guardrails-event-bus/apply.sh
          DRY_RUN=1 modernization/changes/002-guardrails-event-bus/apply.sh
          chmod +x modernization/changes/003-ci-gates-sbom/apply.sh
          DRY_RUN=1 modernization/changes/003-ci-gates-sbom/apply.sh

  evidence-upload:
    runs-on: ubuntu-latest
    needs: [validate-plan, sbom]
    steps:
      - uses: actions/checkout@v4
      - name: Collect evidence
        run: |
          chmod +x modernization/scripts/collect_evidence.sh
          modernization/scripts/collect_evidence.sh evidence
      - name: Upload Evidence
        uses: actions/upload-artifact@v4
        with:
          name: evidence
          path: evidence
