name: A2A Research Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Achtung: GitHub Actions läuft in UTC. Mo–Fr, stündlich 08–19 UTC.
  schedule:
    - cron: "0 8-19 * * 1-5"

permissions:
  contents: read

concurrency:
  group: a2a-research-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install OS packages for WeasyPrint
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf-2.0-0 \
            libffi-dev \
            fonts-liberation2

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt

      - name: Run tests
        run: python -m pytest -q

  run-orchestrator:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install OS packages for WeasyPrint
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcairo2 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf-2.0-0 \
            libffi-dev \
            fonts-liberation2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: No dummy content guard
        run: python ops/no_demo_guard.py

      - name: Run orchestrator (LIVE)
        env:
          # Google OAuth
          GOOGLE_CLIENT_ID:        ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET:    ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN:    ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          GOOGLE_TOKEN_URI:        ${{ secrets.GOOGLE_TOKEN_URI != '' && secrets.GOOGLE_TOKEN_URI || 'https://oauth2.googleapis.com/token' }}
          # Kalender
          GOOGLE_CALENDAR_IDS:     ${{ secrets.GOOGLE_CALENDAR_IDS }}
          CAL_LOOKAHEAD_DAYS:      30
          CAL_LOOKBACK_DAYS:       2
          # Mail/SMTP/IMAP
          MAIL_FROM:               ${{ secrets.MAIL_FROM }}
          SMTP_HOST:               ${{ secrets.SMTP_HOST }}
          SMTP_PORT:               ${{ secrets.SMTP_PORT }}
          SMTP_USER:               ${{ secrets.SMTP_USER }}
          SMTP_PASS:               ${{ secrets.SMTP_PASS }}
          SMTP_SECURE:             ${{ secrets.SMTP_SECURE }}
          IMAP_HOST:               ${{ secrets.IMAP_HOST }}
          IMAP_PORT:               ${{ secrets.IMAP_PORT }}
          IMAP_USER:               ${{ secrets.IMAP_USER }}
          IMAP_PASS:               ${{ secrets.IMAP_PASS }}
          # HubSpot (falls erforderlich)
          HUBSPOT_ACCESS_TOKEN:    ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
          HUBSPOT_PORTAL_ID:       ${{ secrets.HUBSPOT_PORTAL_ID }}
          # Sonstiges
          A2A_TEST_MODE:           "0"
        run: python -m core.orchestrator

      - name: Upload exports
        uses: actions/upload-artifact@v4
        with:
          name: exports-${{ github.run_id }}
          path: |
            output/exports/**
          if-no-files-found: warn
          retention-days: 7
